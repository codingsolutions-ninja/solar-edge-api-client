/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'jacoco'
    id 'maven'
    id 'signing'
    id 'com.palantir.git-version' version '3.0.0'

}

group = "ninja.codingsolutions"
archivesBaseName = "solar-edge-api-client"
version gitVersion()
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
ext {
    repoPath = System.getenv('GH_REPO_PATH')
    ghToken = System.getenv('GH_TOKEN')
    authorName = System.getenv('AUTHOR_NAME')
    authorId = System.getenv('AUTHOR_ID')
    authorEmail = System.getenv('AUTHOR_EMAIL')
    projectName = System.getenv('PROJECT_NAME')
    projectUrl = System.getenv('PROJECT_URL')
    scmUrl = System.getenv('SCM_URL')
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.16.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testCompile "org.mockito:mockito-core:5.8.0"
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.16.1'

}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}
test {
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
}
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
artifacts {
    archives javadocJar, sourcesJar
}



signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if(signingKey == null || signingPassword == null)
        return
    project.logger.lifecycle('Signing Archives')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
}

def getEnvironmentVarIfDef(varName, defValue) {
    def varValue = System.getenv(varName)
    if (varValue != null)
        return varValue
    else
        return defValue
}

//allow building witout sonatype oss info
if (!project.hasProperty("ossrhUsername")) {
  ext.ossrhUsername = getEnvironmentVarIfDef("OSSRH_USERNAME", "OSSRH-USERNAME-SHOULD-BE-DEFINED-EXTERNALLY")
}

//allow building without sonatype oss info
if (!project.hasProperty("ossrhPassword")) {
  ext.ossrhPassword = getEnvironmentVarIfDef("OSSRH_PASSWORD", "OSSRH-PASSWORD-SHOULD-BE-DEFINED-EXTERNALLY")
}


//maven central
uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name projectName
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'A simple API that abstracts fetching data from the solar edge api and getting back a POJO'
        url projectUrl

        scm {
          connection 'scm:git:' + scmUrl
          developerConnection 'scm:git:' + scmUrl
          url scmUrl
        }

        licenses {
          license {
            name 'The MIT License (MIT)'
            url 'https://mit-license.org/'
          }
        }

        developers {
          developer {
            id authorId
            name authorName
            email authorEmail
          }
        }
      }
    }
  }
}